.\" man page for liblinklist
.\" Contact dev@hyper-active.com.au to correct errors or omissions. 
.TH ll_init 3 "5 April 2008" "0.1" "Simple library to manage a free-standing linked list of generic objects."
.SH NAME
ll_init \- Initialise the the list structure.
.SH SYNOPSIS
.B #include <linklist.h>
.sp
.B void ll_init(linklist_t *list);
.br
.SH EXAMPLES
#include <linklist.h>
.sp
int main(void) {
.br
	list_t *list;
.sp
	list = (list_t *) malloc(sizeof(list_t));
.br
	ll_init(list);
.br
	/* do something with the list. */
.br
	ll_free(list);
.br
	free(list);
.br
	return(0);
.br
}
.SH DESCRIPTION
.B ll_init()
is used to initialise a linklist structure.  The pointer that is provided can be an auto variable that remains in scope, or a pointer to memory that has been obtained from the heap (malloc).
.sp
When the list is no longer needed (and presumably empty), it's internal allocations need to be freed, so ll_free() should be called, before freeing the memory created for the list_t structure.
.SH SEE ALSO
.BR liblinklist (3),
.BR ll_init (3),
.BR ll_free (3),
.BR ll_push_head (3),
.BR ll_push_tail (3),
.BR ll_pop_head (3),
.BR ll_pop_tail (3),
.BR ll_get_head (3),
.BR ll_get_tail (3),
.BR ll_start (3),
.BR ll_next (3)
.SH BUGS
No known bugs at this time. 
.SH AUTHOR
.nf
Clint Webb (webb.clint@gmail.com)
on behalf of Hyper-Active Systems, Australia.
.br
http://www.hyper-active.com.au/liblinklist/
.fi
.SH HISTORY
Apr 05, 2009 \- v0.1 - Pre-release.  
